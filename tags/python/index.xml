<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Dinis Peixoto</title>
    <link>https://dinispeixoto.com/tags/python/</link>
    <description>Recent content in python on Dinis Peixoto</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 03 Apr 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://dinispeixoto.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>@staticmethod vs @classmethod</title>
      <link>https://dinispeixoto.com/til/staticmethod-vs-classmethod/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://dinispeixoto.com/til/staticmethod-vs-classmethod/</guid>
      <description>Object-oriented programming in Python is far from being perfect. There are, however, some built-in functions that help programmers achieve OOP as we can find in truly OOP languages like Java or C#. Today I will try to clarify the purpose of two built-in decorators that are widely used in the context of OOP: @staticmethod and @classmethod.
Let&amp;rsquo;s consider the example below of an Example python class, with a method, a static method and a class method.</description>
    </item>
    
    <item>
      <title>Force Python to release memory</title>
      <link>https://dinispeixoto.com/til/force-python-to-release-memory/</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://dinispeixoto.com/til/force-python-to-release-memory/</guid>
      <description>Let me start by clarifying that there are far better solutions to manage Python&amp;rsquo;s memory other than the one I&amp;rsquo;ll showcase here. The solution/workaround that I will present was appropriate for the problem I was facing, which included having to process multiple really large pickle objects. Please note that loading multiple of these objects to memory was not even an option as they could take up to 20 Gs of memory.</description>
    </item>
    
  </channel>
</rss>